---
title: "Bechdel Test Models"
author: "Simal Sami"
format: html
editor: visual
---

## Models

```{r}
library(tidyverse)
library(tidymodels)

movies <- read_csv("../Data/movies.csv")
raw_bechdel <- read_csv("../Data/raw_bechdel.csv")
```

In this model, I use logistic regression to assess whether there is a relationship between Bechdel Test pass/failure and the genre of the movie.

```{r}
ggplot(movies_sorted_genre, aes(genre, fill = binary )) +
    geom_bar() +
    coord_flip()


```

```{r}
movies$binary <- as.factor(movies$binary)
```

```{r}

model_formula <- formula(binary ~ genre)

```

```{r}
movie_wf <- workflow() %>%
  add_formula(model_formula)

```

```{r}
set.seed(123)  
movie_split <- initial_split(movies, prop = 0.8)
movie_train <- training(movie_split)
movie_test <- testing(movie_split)


```

```{r}
glm_spec <- logistic_reg() %>%
  set_engine("glm")

glm_fit <- movie_wf %>%
  add_model(glm_spec) %>%
  fit(movie_train)
```

```{r}



glm_fit %>% predict(movie_test) %>%
  cbind(movie_test) %>%
  conf_mat(binary, .pred_class)

glm_fit %>% predict(movie_test) %>%
  cbind(movie_test) %>%
  accuracy(binary, .pred_class)





```

```{r}

glm_fit %>% predict(movie_train) %>%
  cbind(movie_train) %>%
  conf_mat(binary, .pred_class)

glm_fit %>% predict(movie_train) %>%
  cbind(movie_train) %>%
  accuracy(binary, .pred_class)
```

```{r}
glm_fit %>%
  predict(movie_test, type="class") %>%
  bind_cols(movie_test) %>%
  conf_mat(truth = binary, estimate = .pred_class) %>%
  autoplot() 
```

```{r}
 movies_sorted %>%
  mutate(movies = fct_reorder(genre, budget)) %>%
  ggplot(aes(budget, genre, fill = binary, color = binary)) +
  geom_boxplot(position = position_dodge(preserve = "single"), alpha = 0.2) +
  scale_x_log10(labels = scales::dollar) +
  theme(legend.position = "top") +
  scale_fill_brewer(palette = "Dark2") +
  scale_color_brewer(palette = "Dark2") +
  labs(y = NULL, color = NULL, fill = NULL, x = "Budget")









```

```{r message=FALSE, echo=FALSE, warning=FALSE, results='hide'}
#| label: fig-13
#| message: false
#| fig-cap: Logistic regression plot for predicting passing based on revenue and budget

set.seed(123)
movies <- data.frame(
  pass_bechedel = sample(c("PASS", "FAIL"), 100, replace = TRUE),
  budget = runif(100, 1e6, 1e8),
  revenue = runif(100, 1e6, 1e8)
)


movies %>%
  ggplot(aes(x = budget, y = revenue, color = pass_bechedel)) +
  geom_point(alpha = 0.7) +
  labs(title = "Scatter Plot of Budget vs Revenue",
       x = "Budget",
       y = "Revenue",
       color = "Bechdel Test")


movies_lm <- lm(revenue ~ pass_bechedel + budget, data = movies)




movies_intervals <- reg_intervals(revenue ~ pass_bechedel + budget, data = movies, times = 500)

movies_intervals %>%
  ggplot(aes(x = term, y = .estimate)) +
  geom_point(size = 2, color = "steelblue") +
  geom_errorbar(aes(ymin = .lower, ymax = .upper), width = 0.3, color = "steelblue") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Confidence Intervals for Model Coefficients") +
  coord_flip()

```

```{r message=FALSE, echo=FALSE, warning=FALSE, results='hide'}
#| label: fig-16
#| message: false
#| fig-cap: Logistic regression plot for predicting passing based on genre and rating

set.seed(123)
movies <- data.frame(
  pass_bechedel = sample(c(0, 1), 100, replace = TRUE),  
  genre = sample(c("Action", "Drama", "Comedy", "Sci-Fi"), 100, replace = TRUE),
  rating = runif(100, 1, 10) 
)

movies %>%
  ggplot(aes(x = rating, y = genre, color = factor(pass_bechedel))) +
  geom_point(alpha = 0.7) +
  labs(title = "Scatter Plot of Rating vs Genre",
       x = "Rating",
       y = "Genre",
       color = "Pass Bechdel Test")

movies_glm <- glm(pass_bechedel ~ genre + rating, data = movies, family = "binomial")


movies_intervals <- reg_intervals(movies_glm, data = movies, times = 500)

movies_intervals %>%
  ggplot(aes(x = term, y = .estimate)) +
  geom_point(size = 2, color = "steelblue") +
  geom_errorbar(aes(ymin = .lower, ymax = .upper), width = 0.3, color = "steelblue") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Confidence Intervals for Model Coefficients") +
  coord_flip()


```
